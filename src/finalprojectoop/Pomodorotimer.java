/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package finalprojectoop;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author user
 */
public class Pomodorotimer extends javax.swing.JInternalFrame {

    private Timer timer;
    private int hours;
    private int minutes;
    private int seconds;
    /**
     * Creates new form Pomodorotimer
     */
    public Pomodorotimer() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
    }
    
    

public void startTimer(int hours, int minutes) {
    // Assign the specified hours and minutes to instance variables
    this.hours = hours;
    this.minutes = minutes;
    // Initialize seconds to 0
    this.seconds = 0;

    // Create a new Timer object that triggers an action event every 1000 milliseconds (1 second)
    timer = new Timer(1000, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Call the updateTimer method when the action event is triggered
            updateTimer();
        }
    });
    
    // Start the timer
    timer.start();
}

 
  /**
 * Updates the countdown timer every second.
 */
private void updateTimer() {
    // Check if hours, minutes, and seconds are all 0
    if (hours == 0 && minutes == 0 && seconds == 0) {
        // Stop the timer and display a message
        timer.stop();
        JOptionPane.showMessageDialog(this, "Timer Finished!");
        return;
    }

    // Format the time string with leading zeros
    String timeStr = String.format("%02d:%02d:%02d", hours, minutes, seconds);
    // Set the timer label text to the formatted time string
    timerLabel.setText(timeStr);

    // Decrement seconds, minutes, and hours as needed
    if (seconds == 0) {
        if (minutes == 0) {
            if (hours == 0) {
                // Stop the timer and display a message
                timer.stop();
                JOptionPane.showMessageDialog(this, "Timer Finished!");
                return;
            }
            // Decrement hours and reset minutes to 59
            hours--;
            minutes = 59;
        } else {
            // Decrement minutes by 1
            minutes--;
        }
        // Reset seconds to 59
        seconds = 59;
    } else {
        // Decrement seconds by 1
        seconds--;
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timerLabel = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 238, 204));
        jPanel1.setToolTipText("");

        timerLabel.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLabel.setText("00:00:00");

        startBtn.setBackground(new java.awt.Color(0, 98, 65));
        startBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        startBtn.setForeground(new java.awt.Color(255, 255, 255));
        startBtn.setText("Start");
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
        });

        stopBtn.setBackground(new java.awt.Color(0, 98, 65));
        stopBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        stopBtn.setForeground(new java.awt.Color(255, 255, 255));
        stopBtn.setText("Stop");
        stopBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(365, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn)
                    .addComponent(stopBtn))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
  
/**
 * Prompts the user to enter a duration in the format HH:MM and starts the timer.
 * If the input format is valid, starts the timer with the specified duration.
 * If the input format is invalid, displays an error message.
 */
String input = JOptionPane.showInputDialog("Enter Duration (HH:MM):");
// Split the input string by colon to separate hours and minutes
String[] time = input.split(":");
if (time.length == 2) {
    // If the input contains two parts (hours and minutes)
    // Parse the hours and minutes as integers
    int hours = Integer.parseInt(time[0]);
    int minutes = Integer.parseInt(time[1]);
    // Start the timer with the specified duration
    startTimer(hours, minutes);
} else {
    // If the input format is invalid, display an error message
    JOptionPane.showMessageDialog(this, "Invalid input. Please Enter duration in format HH:MM.");
}

    }//GEN-LAST:event_startBtnMouseClicked

    private void stopBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopBtnMouseClicked

       if (timer != null) {
    // Reset hours, minutes, and seconds to zero
    hours = 0;
    minutes = 0;
    seconds = 0;
    // Format the time string with the updated values
    String timeStr = String.format("%02d:%02d:%02d", hours, minutes, seconds);
    // Update the timer label with the new time string
    timerLabel.setText(timeStr);
    // Stop the timer
    timer.stop();
}

        
        
    }//GEN-LAST:event_stopBtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
