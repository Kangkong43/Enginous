/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package finalprojectoop;

import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;

    
/**
 *
 * @author user
 */
public class Converter extends javax.swing.JInternalFrame {
    
    //Variable for the units
    double meter,kilometer,Inch, Foot, Centimeter;
    double metersecond,footsecond,gravity;
    double Watt,Kilowatt,Hp;
    double Millisecond,Second,Minute,Hour;
    double celsius,fahrenheit,kelvin;
    
    
    public Converter() {
        initComponents();
        //Removed the border around the jinternalframe
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        U1Value = new javax.swing.JTextField();
        U2Value = new javax.swing.JTextField();
        U3Value = new javax.swing.JTextField();
        U4Value = new javax.swing.JTextField();
        U5Value = new javax.swing.JTextField();
        measurement = new javax.swing.JComboBox<>();
        unit1Lb = new javax.swing.JLabel();
        unit2Lb = new javax.swing.JLabel();
        unit3Lb = new javax.swing.JLabel();
        unit4Lb = new javax.swing.JLabel();
        unit5Lb = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setBackground(new java.awt.Color(255, 238, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(770, 520));

        jPanel1.setBackground(new java.awt.Color(255, 238, 204));

        jPanel2.setBackground(new java.awt.Color(0, 98, 65));

        U1Value.setText("0");
        U1Value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                U1ValueMouseClicked(evt);
            }
        });
        U1Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                U1ValueActionPerformed(evt);
            }
        });

        U2Value.setText("0");
        U2Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                U2ValueActionPerformed(evt);
            }
        });

        U3Value.setText("0");
        U3Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                U3ValueActionPerformed(evt);
            }
        });

        U4Value.setText("0");
        U4Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                U4ValueActionPerformed(evt);
            }
        });

        U5Value.setText("0");
        U5Value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                U5ValueActionPerformed(evt);
            }
        });

        measurement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Length", "Accelaration", "Power", "Time", "Temparature" }));
        measurement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measurementActionPerformed(evt);
            }
        });

        unit1Lb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unit1Lb.setForeground(new java.awt.Color(255, 255, 255));
        unit1Lb.setText("Meter");

        unit2Lb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unit2Lb.setForeground(new java.awt.Color(255, 255, 255));
        unit2Lb.setText("Kilometer");

        unit3Lb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unit3Lb.setForeground(new java.awt.Color(255, 255, 255));
        unit3Lb.setText("Inch");

        unit4Lb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unit4Lb.setForeground(new java.awt.Color(255, 255, 255));
        unit4Lb.setText("Foot");

        unit5Lb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        unit5Lb.setForeground(new java.awt.Color(255, 255, 255));
        unit5Lb.setText("Centimeter");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unit2Lb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(unit1Lb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(unit3Lb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(unit5Lb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(unit4Lb, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(U5Value, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(U4Value, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(U3Value, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(U2Value, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(U1Value)
                    .addComponent(measurement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(measurement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(U1Value, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit1Lb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(U2Value, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit2Lb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(U3Value, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit3Lb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(U4Value, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit4Lb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(U5Value, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit5Lb))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(213, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void U1ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_U1ValueActionPerformed
        // TODO add your handling code here:
        try{
        //Change the text  into a double value with Double.valueOf
        Double userInput = Double.valueOf(U1Value.getText());
        //Check the selected measurement
        int selected =  measurement.getSelectedIndex();

           switch(selected){
            
            case 0:
                //If measurement is Length and the input field is meter              
                meter = 1.0 * userInput;
                kilometer = 0.001 * userInput;
                Inch = 39.37 * userInput;    
                Foot = 3.28 * userInput;
                Centimeter = 100.0* userInput;
                
                //Set the text of each values 
                U1Value.setText(Double.toString(meter));
                U2Value.setText(Double.toString(kilometer));
                U3Value.setText(Double.toString(Inch));
                U4Value.setText(Double.toString(Foot));
                U5Value.setText(Double.toString(Centimeter));

                break;
            case 1:
                //If measurement is Accelaration and the input field is metersecond 
                metersecond = 1.0 * userInput;
                footsecond = 3.28 * userInput;
                gravity = 0.1 * userInput;
                
                //Set the text of each values 
                U1Value.setText(Double.toString(metersecond));
                U2Value.setText(Double.toString(footsecond));
                U3Value.setText(Double.toString(gravity));
               
                break;    
            case 2: 
                //If measurement is Power and the input field is Watt 
                Watt = 1.0 * userInput;
                Kilowatt= 0.001 * userInput;
                Hp = 0.01341 * userInput;
                
                //Set the text of each values 
                U1Value.setText(Double.toString(Watt));
                U2Value.setText(Double.toString(Kilowatt));
                U3Value.setText(Double.toString(Hp));
                
                
                break;
            case 3: 
                
                //If measurement is Time and the input field is Millisecond
                Millisecond = 1.0 * userInput;
                Second= 0.001 * userInput;
                Minute = 1.67E-5 * userInput;
                Hour = 2.78E-7 * userInput;
                
                //Set the text of each values 
                U1Value.setText(Double.toString(Millisecond));
                U2Value.setText(Double.toString(Second));
                U3Value.setText(Double.toString(Minute));
                U4Value.setText(Double.toString(Hour));
               
                break;
            case 4:
                //If measurement is Temperature and the input field is celsius
                celsius = 1.0 * userInput;
                fahrenheit= 33.8 * userInput;
                kelvin = 274.15* userInput;
                
                //Set the text of each values 
                U1Value.setText(Double.toString(celsius));
                U2Value.setText(Double.toString(fahrenheit));
                U3Value.setText(Double.toString(kelvin));
            
                break;
           }
   

        
        
        
        
}catch(Exception e){
    //If the user input a value other than a number
    JOptionPane.showMessageDialog(null, "Please enter a valid number");
    
}
        
        
        
        
        
    }//GEN-LAST:event_U1ValueActionPerformed

    private void U2ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_U2ValueActionPerformed
        // TODO add your handling code here:
       try{
        //Change the text  into a double value with Double.valueOf
        Double userInput = Double.valueOf(U2Value.getText());
        //Check the selected measurement
        int selected =  measurement.getSelectedIndex();
     
           
           
   
           switch(selected){
            
            case 0:
                //If measurement is Length and the input field is Kilometer
                meter = 1000.0 * userInput;
                kilometer = 1.0 * userInput;
                Inch = 39370.08 * userInput;    
                Foot = 3280.84 * userInput;
                Centimeter = 100000.0* userInput;
                
                //Set the text of each values 
                U1Value.setText(Double.toString(meter));
                U2Value.setText(Double.toString(kilometer));
                U3Value.setText(Double.toString(Inch));
                U4Value.setText(Double.toString(Foot));
                U5Value.setText(Double.toString(Centimeter));

                break;
            case 1:
                //If measurement is Accelerator and the input field is footsecond
                metersecond = 0.3 * userInput;
                footsecond = 1.0 * userInput;
                gravity = 0.03 * userInput;
                
                //Set the text of each values
                U1Value.setText(Double.toString(metersecond));
                U2Value.setText(Double.toString(footsecond));
                U3Value.setText(Double.toString(gravity));
               
                break;    
            case 2: 
                //If measurement is Power and the input field is Kilowatt
                Watt = 1000.0 * userInput;
                Kilowatt= 1.0 * userInput;
                Hp = 1.34 * userInput;
                
                //Set the text of each values
                U1Value.setText(Double.toString(Watt));
                U2Value.setText(Double.toString(Kilowatt));
                U3Value.setText(Double.toString(Hp));
                
                
                break;
            case 3: 
                //If measurement is Time and the input field is Second
                Millisecond = 1000.0 * userInput;
                Second= 1.0 * userInput;
                Minute = 0.02 * userInput;
                Hour = 0.000278 * userInput;
                
                //Set the text of each values
                U1Value.setText(Double.toString(Millisecond));
                U2Value.setText(Double.toString(Second));
                U3Value.setText(Double.toString(Minute));
                U4Value.setText(Double.toString(Hour));
               
                break;
            case 4:
                //If measurement is Temperature and the input field is fahrenheit
                celsius = -17.22 * userInput;
                fahrenheit= 1.0 * userInput;
                kelvin = 255.93* userInput;
                  
                //Set the text of each values
                U1Value.setText(Double.toString(celsius));
                U2Value.setText(Double.toString(fahrenheit));
                U3Value.setText(Double.toString(kelvin));
            
                break;
           }
   
        
}catch(Exception e){
    //If the user input a value other than a number
    JOptionPane.showMessageDialog(null, "Please enter a valid number");
    
}
        
        
        
    }//GEN-LAST:event_U2ValueActionPerformed

    private void measurementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_measurementActionPerformed
    
        //Check the selected measurement
     int selected =  measurement.getSelectedIndex();
     
     //Use switch case to check what the user is selecting
     switch(selected){
    
     case 0:
         //If measurement is Length 
         
         //Set the visibility of unit4 and 5 labels to true 
         unit4Lb.setVisible(true);
         unit5Lb.setVisible(true);
         
          //Set the visibility of unit4 and 5 inputFields to true 
         U4Value.setVisible(true);
         U5Value.setVisible(true);
         
         //Set the text of unit1 to 5 labels to each correspanding units 
         unit1Lb.setText("Meter");
         unit2Lb.setText("Kilometer");
         unit3Lb.setText("Inch");
         unit4Lb.setText("Foot");
         unit5Lb.setText("Centimeter");
         
         //Set the default value of the inputField
        U1Value.setText("0");
        U2Value.setText("0");
        U3Value.setText("0");
        U4Value.setText("0");
        U5Value.setText("0"); 
         
         break;
     case 1:
         
         //Set the visibility of unit4 and 5 labels to false(unit1-3 labels are only needed)
         unit4Lb.setVisible(false);
         unit5Lb.setVisible(false);
         
         //Set the visibility of unit4 and 5 inputfields to false(unit1-3 inputfields are only needed)
         U4Value.setVisible(false);
         U5Value.setVisible(false);
         
         //Set the text of unit1 to 3 labels to each correspanding units 
         unit1Lb.setText("MeterSecond");
         unit2Lb.setText("FootSecond");
         unit3Lb.setText("Gravity");
         
         //Set the default value of the inputField
        U1Value.setText("0");
        U2Value.setText("0");
        U3Value.setText("0");
      
         break;
     case 2:
         //Set the visibility of unit4 and 5 labels to false(unit1-3 labels are only needed)
         unit4Lb.setVisible(false);
         unit5Lb.setVisible(false);
         
         //Set the visibility of unit4 and 5 inputfields to false(unit1-3 inputfields are only needed)
         U4Value.setVisible(false);
         U5Value.setVisible(false);
         
          //Set the text of unit1 to 3 labels to each correspanding units 
         unit1Lb.setText("Watt");
         unit2Lb.setText("KiloWatt");
         unit3Lb.setText("HorsePower");
         
         //Set the default value of the inputField
        U1Value.setText("0");
        U2Value.setText("0");
        U3Value.setText("0");
   
         break;
     case 3:
         //Set the visibility of unit4 label true and 5 label to false(unit1-4 labels are needed)
         unit4Lb.setVisible(true);
         unit5Lb.setVisible(false);
         
         //Set the visibility of unit4 inputfield true and 5 inputfield to false(unit1-4 inputfields are needed)
         U5Value.setVisible(false);
         U4Value.setVisible(true);
         unit1Lb.setText("MilliSecond");
         unit2Lb.setText("Second");
         unit3Lb.setText("Minute");
         unit4Lb.setText("Hour");
         
         //Set the default value of the inputField
        U1Value.setText("0");
        U2Value.setText("0");
        U3Value.setText("0");
        U4Value.setText("0");
      
            break;
     case 4:
         //Set the visibility of unit4 and 5 labels to false(unit1-3 labels are only needed)
         unit4Lb.setVisible(false);
         unit5Lb.setVisible(false);
         
          //Set the visibility of unit4 and 5 inputfields to false(unit1-3 inputfields are only needed)
         U4Value.setVisible(false);
         U5Value.setVisible(false);
         
         //Set the text of unit1 to 3 labels to each correspanding units 
         unit1Lb.setText("Celsius");
         unit2Lb.setText("Fahrenheit");
         unit3Lb.setText("Kelvin");
         //Set the default value of the inputField
        U1Value.setText("0");
        U2Value.setText("0");
        U3Value.setText("0");
        
      
         break;
    }
        
    }//GEN-LAST:event_measurementActionPerformed

    private void U1ValueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_U1ValueMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_U1ValueMouseClicked

    private void U3ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_U3ValueActionPerformed
        // TODO add your handling code here:
        try{
        //Change the text  into a double value with Double.valueOf
        Double userInput = Double.valueOf(U3Value.getText());
        //Check the selected measurement
        int selected =  measurement.getSelectedIndex();
     
           
           
   
           switch(selected){
            
            case 0:
                //If measurement is Length and the input field is foot 
                meter = 0.03 * userInput;
                kilometer = 2.54E-5 * userInput;
                Inch = 1.0 * userInput;    
                Foot = 0.08 * userInput;
                Centimeter = 2.54 * userInput;
                
                //Set the text of each values
                U1Value.setText(Double.toString(meter));
                U2Value.setText(Double.toString(kilometer));
                U3Value.setText(Double.toString(Inch));
                U4Value.setText(Double.toString(Foot));
                U5Value.setText(Double.toString(Centimeter));

                break;
            case 1:
              
                //If measurement is Acceleration and the input field is gravity 
                metersecond = 9.81 * userInput;              
                footsecond = 32.17 * userInput;
                gravity = 1.0 * userInput;
                //Set the text of each values
                U1Value.setText(Double.toString(metersecond));
                U2Value.setText(Double.toString(footsecond));
                U3Value.setText(Double.toString(gravity));
               
                break;    
            case 2: 
                //If measurement is Power and the input field is Horsepower 
                Watt = 745.7 * userInput;               
                Kilowatt= 0.75 * userInput;
                Hp = 1.0 * userInput;
                //Set the text of each values
                U1Value.setText(Double.toString(Watt));
                U2Value.setText(Double.toString(Kilowatt));
                U3Value.setText(Double.toString(Hp));
                
                
                break;
            case 3: 
                //If measurement is Time and the input field is Minute 
                Millisecond = 60000.0 * userInput;              
                Second= 60.0 * userInput;
                Minute = 1.0 * userInput;
                Hour = 0.02 * userInput;
                    
                //Set the text of each values
                U1Value.setText(Double.toString(Millisecond));
                U2Value.setText(Double.toString(Second));
                U3Value.setText(Double.toString(Minute));
                U4Value.setText(Double.toString(Hour));
               
                break;
            case 4:
                //If measurement is Temperature and the input field is Kelvin 
                celsius = -272.15 * userInput;              
                fahrenheit= -457.8 * userInput;
                kelvin = 1.0* userInput;
                  
                //Set the text of each values
                U1Value.setText(Double.toString(celsius));
                U2Value.setText(Double.toString(fahrenheit));
                U3Value.setText(Double.toString(kelvin));
            
                break;
           }
   

        
        
        
        
}catch(Exception e){
    //If the user input a value other than a number
    JOptionPane.showMessageDialog(null, "Please enter a valid number");
    
}
        
        
        
    }//GEN-LAST:event_U3ValueActionPerformed

    private void U4ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_U4ValueActionPerformed
        // TODO add your handling code here:
         try{
             //Change the text  into a double value with Double.valueOf
        Double userInput = Double.valueOf(U4Value.getText());
        //Check the selected measurement
        int selected =  measurement.getSelectedIndex();
     
           
           
   
           switch(selected){
            
            case 0:
                //If measurement is Length and the input field is Foot 
                meter = 0.3 * userInput;
                kilometer = 0.000305 * userInput;
                Inch = 12.0 * userInput;    
                Foot = 1.0 * userInput;
                Centimeter = 30.48 * userInput;
                
                //Set the text of each values
                U1Value.setText(Double.toString(meter));
                U2Value.setText(Double.toString(kilometer));
                U3Value.setText(Double.toString(Inch));
                U4Value.setText(Double.toString(Foot));
                U5Value.setText(Double.toString(Centimeter));

                break;
               
            
            case 3: 
                //If measurement is Time and the input field is Hour 
                Millisecond = 3600000.0 * userInput;             
                Second= 3600.0 * userInput;
                Minute = 60.0 * userInput;
                Hour = 1.0 * userInput;
                    
                //Set the text of each values
                U1Value.setText(Double.toString(Millisecond));
                U2Value.setText(Double.toString(Second));
                U3Value.setText(Double.toString(Minute));
                U4Value.setText(Double.toString(Hour));
               
                break;
            
           }
   

        
        
        
        
}catch(Exception e){
    //If the user input a value other than a number
    JOptionPane.showMessageDialog(null, "Please enter a valid number");
    
}
    }//GEN-LAST:event_U4ValueActionPerformed

    private void U5ValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_U5ValueActionPerformed
        // TODO add your handling code here:
        try{
            //Change the text  into a double value with Double.valueOf
        Double userInput = Double.valueOf(U5Value.getText());
        //Check the selected measurement
        int selected =  measurement.getSelectedIndex();
     
           
           
   
           switch(selected){
            
            case 0:
                //If measurement is Length and the input field is Centimeter 
                meter = 0.01 * userInput;
                kilometer = 1.00E-5 * userInput;
                Inch = 0.39 * userInput;    
                Foot = 0.03 * userInput;                 
                Centimeter = 1.0* userInput;
                
                //Set the text of each values
                U1Value.setText(Double.toString(meter));
                U2Value.setText(Double.toString(kilometer));
                U3Value.setText(Double.toString(Inch));
                U4Value.setText(Double.toString(Foot));
                U5Value.setText(Double.toString(Centimeter));

                break;
               
            
          
            
           }
   

        
}catch(Exception e){
    //If the user input a value other than a number
    JOptionPane.showMessageDialog(null, "Please enter a valid number");
    
}
    }//GEN-LAST:event_U5ValueActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField U1Value;
    private javax.swing.JTextField U2Value;
    private javax.swing.JTextField U3Value;
    private javax.swing.JTextField U4Value;
    private javax.swing.JTextField U5Value;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> measurement;
    private javax.swing.JLabel unit1Lb;
    private javax.swing.JLabel unit2Lb;
    private javax.swing.JLabel unit3Lb;
    private javax.swing.JLabel unit4Lb;
    private javax.swing.JLabel unit5Lb;
    // End of variables declaration//GEN-END:variables
}
