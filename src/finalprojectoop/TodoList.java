/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package finalprojectoop;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class TodoList extends javax.swing.JInternalFrame {
   public DefaultTableModel tableModel;
    /**
     * Creates new form TodoList
     */
    public TodoList() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        updateTable();
       
    }
    
private void updateTable() {
    // Get the table model
    DefaultTableModel dtm = (DefaultTableModel) taskList.getModel();
    // Get the current row count
    int rowCount = dtm.getRowCount();
    
    // Remove all existing rows from the table
    while (rowCount-- != 0) {
        dtm.removeRow(0);
    }
    
    try {
        // Open the Task.txt file for reading
        FileInputStream file = new FileInputStream("Task.txt");
        Scanner scanner = new Scanner(file);
        // Read each line from the file and add it to the table
        while (scanner.hasNextLine()) {
            Vector row = new Vector();
            row.add(scanner.nextLine());
            dtm.addRow(row);
        }
        // Close the scanner and file streams
        scanner.close();
        file.close();
    } catch (Exception ex) {
        // Handle any exceptions that occur (e.g., file not found)
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        taskText = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 238, 204));

        btnDelete.setBackground(new java.awt.Color(0, 98, 65));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        taskText.setColumns(20);
        taskText.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        taskText.setRows(5);

        btnAdd.setBackground(new java.awt.Color(0, 98, 65));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        taskList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task(s)"
            }
        ));
        jScrollPane1.setViewportView(taskList);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("TASK:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 93, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(taskText, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(151, 151, 151))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(taskText, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Get the index of the selected row in the taskList JTable
int ri = taskList.getSelectedRow();

// Check if a row is selected
if (ri != -1) {
    // Retrieve the task from the selected row
    String task = (String) taskList.getValueAt(ri, 0);

    try {
        // Open an output stream to write data to a temporary file
        FileOutputStream file = new FileOutputStream("Temp.txt");
        // Create a PrintStream object to write data to the temporary file
        PrintStream print = new PrintStream(file);
        // Open an input stream to read data from the original file
        FileInputStream dfile = new FileInputStream("Task.txt");
        // Create a Scanner object to read data from the input stream
        Scanner sc = new Scanner(dfile);

        // Loop through each line in the original file
        while (true) {
            try {
                // Read the next line from the original file
                String s = sc.nextLine();
                // Check if the current line (task) is different from the selected task
                if (!task.equalsIgnoreCase(s)) {
                    // Write the current line to the temporary file if it doesn't match the selected task
                    print.println(s);
                }
            } catch (Exception ex) {
                // Exit the loop if an exception occurs while reading the file
                break;
            }
        }
        // Close the streams
        print.close();
        sc.close();
        file.close();
        dfile.close();

        // Delete the original file
        File taskfile = new File("Task.txt");
        taskfile.delete();
        // Rename the temporary file to the original file
        File tempfile = new File("Temp.txt");
        File newFile = new File("Task.txt");
        tempfile.renameTo(newFile);

        // Update the JTable with the new data
        updateTable();
    } catch (Exception ex) {
        // Display an error message if an exception occurs
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
} else {
    // Display a message prompting the user to select a row if no row is selected
    JOptionPane.showMessageDialog(null, "Please select a row");
}

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

      try {
    // Open an output stream to append data to the "Task.txt" file
    FileOutputStream file = new FileOutputStream("Task.txt", true);
    // Create a PrintStream object to write data to the output stream
    PrintStream print = new PrintStream(file);
    // Retrieve the task from the taskText JTextArea
    String task = taskText.getText();
    // Write the task to the file followed by a new line
    print.println(task);
    // Display a success message indicating that the task was added successfully
    JOptionPane.showMessageDialog(null, "Task added successfully");
    // Update the table to reflect the changes
    updateTable();
    // Close the streams
    print.close();
    file.close();
    // Clear the taskText JTextArea after adding the task
    taskText.setText(null);
} catch (Exception ex) {
    // Display an error message if an exception occurs
    JOptionPane.showMessageDialog(null, ex.getMessage());
}

         
    }//GEN-LAST:event_btnAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable taskList;
    private javax.swing.JTextArea taskText;
    // End of variables declaration//GEN-END:variables
}
